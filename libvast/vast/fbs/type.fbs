namespace vast.fbs.type.bool_type;

/// A boolean value that can either be true or false.
table v0 {}

namespace vast.fbs.type.integer_type;

/// A signed integer.
table v0 {}

namespace vast.fbs.type.count_type;

/// An unsigned integer.
table v0 {}

namespace vast.fbs.type.real_type;

/// A floating-point value.
table v0 {}

namespace vast.fbs.type.duration_type;

/// A time interval.
table v0 {}

namespace vast.fbs.type.time_type;

/// A point in time.
table v0 {}

namespace vast.fbs.type.string_type;

/// A string of characters.
table v0 {}

namespace vast.fbs.type.pattern_type;

/// A regular expression.
table v0 {}

namespace vast.fbs.type.address_type;

/// An IP address (v4 or v6).
table v0 {}

namespace vast.fbs.type.subnet_type;

/// A CIDR subnet.
table v0 {}

namespace vast.fbs.type.enumeration_type;

/// An enumeration type that can have one specific value.
table v0 {
  fields: [string];
}

namespace vast.fbs.type.list_type;

/// An ordered sequence of values.
table v0 {
  type: [ubyte] (nested_flatbuffer: "vast.fbs.Type");
}

namespace vast.fbs.type.map_type;

/// An associative mapping from keys to values.
table v0 {
  key_type: [ubyte] (nested_flatbuffer: "vast.fbs.Type");
  value_type: [ubyte] (nested_flatbuffer: "vast.fbs.Type");
}

namespace vast.fbs.type.alias_type;

/// A type with a name.
table v0 {
  name: string (required);
  type: [ubyte] (nested_flatbuffer: "vast.fbs.Type");
}

namespace vast.fbs.type.record_type;

/// A list of fields, each of which have a name and type.
table v0 {
  fields: [alias_type.v0];
}

namespace vast.fbs.type.kvp_attribute;

/// A key with optional value.
table v0 {
  key: string (required);
  value: [string];
}

namespace vast.fbs.type;

/// The sum type of all possible types.
union Type {
  bool_type.v0,
  integer_type.v0,
  count_type.v0,
  real_type.v0,
  duration_type.v0,
  time_type.v0,
  string_type.v0,
  pattern_type.v0,
  address_type.v0,
  subnet_type.v0,
  enumeration_type.v0,
  list_type.v0,
  map_type.v0,
  alias_type.v0,
  record_type.v0,
}

/// The sum type of all possible attributes.
union Attribute {
  kvp_attribute.v0,
}

namespace vast.fbs;

/// The top-level type.
table Type {
  type: type.Type;
  // attributes: [type.Attribute];
}

root_type Type;
